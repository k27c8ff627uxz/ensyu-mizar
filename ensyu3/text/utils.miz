environ
  vocabularies TARSKI;
  notations TARSKI;
  constructors TARSKI;
  theorems TARSKI, ZFMISC_1;
begin

theorem
  EqSingleton: for x be object holds {x} = {x, x}
proof
  let x be object;
  for a be object holds (a in {x} iff a in {x, x})
  proof
    let a be object;
    thus a in {x} implies a in {x, x}
    proof
      assume a in {x};
      then a = x by TARSKI:def 1;
      hence a in {x, x} by TARSKI:def 2;
    end;
    thus a in {x, x} implies a in {x}
    proof
      assume a in {x, x};
      then a = x or a = x by TARSKI:def 2;
      then a = x;
      hence a in {x} by TARSKI:def 1;
    end;
  end;
  hence {x} = {x, x} by TARSKI:2;
end;

theorem
  SingletonInjection:
    for x, y be object holds {x} = {y} implies x = y
proof
  let x, y be object;
  assume Eqxy: {x} = {y};
  x in {x} by TARSKI:def 1;
  then x in {y} by Eqxy;
  hence x = y by TARSKI:def 1;
end;

theorem
  PairEq:
    for l1, l2, r1, r2 be object holds
      [l1, r1] = [l2, r2] implies (l1 = l2 & r1 = r2)
proof
  let l1, l2, r1, r2 be object;
  assume A1: [l1, r1] = [l2, r2];
  per cases;
  suppose Eq1: l1 = r1;
    Eql1l2r2: {{l1}} = {{l2, r2}, {l2}}
    proof
      thus {{l1}} = {{l1}, {l1}} by EqSingleton
      .= {{l1, l1}, {l1}} by EqSingleton
      .= {{l1, r1}, {l1}} by Eq1
      .= [l1, r1] by TARSKI:def 5
      .= [l2, r2] by A1
      .= {{l2, r2}, {l2}} by TARSKI:def 5;
    end;
    A3: for a be object holds a in {{l2, r2}, {l2}} implies a = {l1}
    proof
      let a be object;
      assume a in {{l2, r2}, {l2}};
      then a in {{l1}} by Eql1l2r2;
      hence a = {l1} by TARSKI:def 1;
    end;
    thus Eql1l2: l1 = l2
    proof
      {l1} = {l2}
      proof
        {l2} in {{l2, r2}, {l2}} by TARSKI:def 2;
        hence {l2} = {l1} by A3;
      end;
      hence l1 = l2 by SingletonInjection;
    end;
    thus r1 = r2
    proof
      {l2, r2} in {{l2, r2}, {l2}} by TARSKI:def 2;
      then {l2, r2} = {l1} by A3;
      then r2 = l2 by ZFMISC_1:5
      .= l1 by Eql1l2
      .= r1 by Eq1;
      hence r2 = r1;
    end;
  end;
  suppose Neql1r1: l1 <> r1;
    EqP: {{l1, r1}, {l1}} = {{l2, r2}, {l2}}
    proof
      thus {{l1, r1}, {l1}} = [l1, r1] by TARSKI:def 5
      .= [l2, r2] by A1
      .= {{l2, r2}, {l2}} by TARSKI:def 5;
    end;
    thus Eql1l2: l1 = l2
    proof
      Notl2l1r1: {l2} <> {l1, r1}
      proof
        assume {l2} = {l1, r1};
        then l1 = r1 by ZFMISC_1:5;
        hence contradiction by Neql1r1;
      end;
      {l2} in {{l2, r2}, {l2}} by TARSKI:def 2;
      then {l2} in {{l1, r1}, {l1}} by EqP;
      then {l2} = {l1, r1} or {l2} = {l1} by TARSKI:def 2;
      then {l2} = {l1} by Notl2l1r1;
      hence l2 = l1 by SingletonInjection;
    end;
    then EqP2: {{l1, r1}, {l1}} = {{l1, r2}, {l1}} by EqP;
    Neql1r2: l1 <> r2
    proof
      assume l1 = r2;
      then EqL2: {{l1, r1}, {l1}} = {{l1, l1}, {l1}} by EqP2
      .= {{l1}, {l1}} by EqSingleton
      .= {{l1}} by EqSingleton;
      {l1, r1} in {{l1, r1}, {l1}} by TARSKI:def 2;
      then {l1, r1} in {{l1}} by EqL2;
      then {l1, r1} = {l1} by TARSKI:def 1;
      then l1 = r1 by ZFMISC_1:5;
      hence contradiction by Neql1r1;
    end;
    thus r1 = r2
    proof
      {l1, r2} in {{l1, r2}, {l1}} by TARSKI:def 2;
      then {l1, r2} in {{l1, r1}, {l1}} by EqP2;
      then A2: {l1, r2} = {l1, r1} or {l1, r2} = {l1} by TARSKI:def 2;
      {l1, r2} <> {l1}
      proof
        assume {l1, r2} = {l1};
        then l1 = r2 by ZFMISC_1:5;
        hence contradiction by Neql1r2;
      end;
      then Eql1r2l1r1: {l1, r2} = {l1, r1} by A2;
      r2 in {l1, r2} by TARSKI:def 2;
      then r2 in {l1, r1} by Eql1r2l1r1;
      then r2 = l1 or r2 = r1 by TARSKI:def 2;
      hence r2 = r1 by Neql1r2;
    end;
  end;
end;
